# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[version]
current = "3.1.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (\-
    (?P<extra>.+)
  )?
  '''

[git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

[[field]]
# the name of the field
name = "extra"
# the default value to use, if there is no match
default = ""

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[file]]
src = "README.rst"

[[file]]
src = ".github/actions/pipenv/action.yml"
[[file]]
src = ".github/workflows/pr-check.yml"
[[file]]
src = ".github/workflows/shared-linters-python.yml"
[[file]]
src = ".github/workflows/shared-pr-check.yml"

[[file]]
src = ".github/workflows/shared-tests-pytests.yml"

[[file]]
src = ".github/workflows/automerge.yml"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[before_commit]]
name = "Build changelog"
cmd = "pipenv run towncrier build --version {new_version} --yes"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
